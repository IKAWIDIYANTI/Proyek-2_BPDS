# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1cbiUhqi79Ewo6-d2TR4chavNnJeDabHS
"""

import streamlit as st
import pandas as pd
import joblib
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from imblearn.over_sampling import SMOTE
from xgboost import XGBClassifier
from sklearn.metrics import roc_auc_score, classification_report
from scipy.stats import chi2_contingency, spearmanr
import os


def train_and_save_model(df_path='data.csv', model_filename='xgboost_model.pkl',
                         scaler_filename='scaler.pkl', high_card_freq_filename='high_card_freq.pkl',
                         model_features_filename='model_features.pkl'):
    """
    Melatih model machine learning terbaik dan menyimpannya,
    bersama dengan scaler, frequency map, dan daftar fitur yang digunakan.
    """
    st.info("Memulai pelatihan dan penyimpanan model. Proses ini mungkin memakan waktu beberapa saat...")

    df = None

    try:

        df = pd.read_csv(df_path, sep=';')
        st.success(f"File '{df_path}' berhasil dimuat dari direktori saat ini.")
    except FileNotFoundError:
        st.warning(f"File '{df_path}' tidak ditemukan di direktori saat ini. Mencoba memuat dari '/content/'.")
        try:

            df = pd.read_csv('/content/' + df_path, sep=';')
            st.success(f"File '{df_path}' berhasil dimuat dari '/content/'.")
        except FileNotFoundError:
            st.error(f"File '{df_path}' tidak ditemukan di '/content/' maupun direktori saat ini. Pastikan Anda telah mengunggah data.csv.")
            return False
        except Exception as e:
            st.error(f"Terjadi kesalahan saat memuat file '{df_path}' dari '/content/': {e}. Pastikan delimiter CSV Anda benar.")
            return False
    except Exception as e:
        st.error(f"Terjadi kesalahan saat memuat file '{df_path}' dari direktori saat ini: {e}. Pastikan delimiter CSV Anda benar.")
        return False

    if df is None:
        return False


    df.columns = df.columns.str.strip()


    if 'status' in df.columns and 'Status' not in df.columns:
        df.rename(columns={'status': 'Status'}, inplace=True)
    elif 'STATUS' in df.columns and 'Status' not in df.columns:
        df.rename(columns={'STATUS': 'Status'}, inplace=True)


    if 'Status' not in df.columns:
        st.error("Kolom 'Status' (atau variasinya) tidak ditemukan dalam dataset setelah mencoba berbagai kapitalisasi. Harap periksa nama kolom di file CSV Anda secara manual.")
        st.write("Nama kolom yang ditemukan setelah pembersihan:", df.columns.tolist())
        return False


    df['target'] = df['Status'].apply(lambda x: 1 if x == 'Dropout' else 0)


    second_sem_cols = ['Curricular_units_2nd_sem_credited', 'Curricular_units_2nd_sem_enrolled',
                       'Curricular_units_2nd_sem_evaluations', 'Curricular_units_2nd_sem_approved',
                       'Curricular_units_2nd_sem_grade', 'Curricular_units_2nd_sem_without_evaluations']


    df = df.drop(columns=second_sem_cols + ['Status'], errors='ignore')

    X = df.drop('target', axis=1)
    y = df['target']

    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, stratify=y, random_state=42)

    high_cardinality = ['Application_mode', 'Course', 'Previous_qualification', 'Nacionality',
                        'Mothers_qualification', 'Fathers_qualification', 'Mothers_occupation', 'Fathers_occupation']

    high_card_freq_maps = {}
    for col in high_cardinality:
        if col in X_train.columns:
            freq = X_train[col].value_counts(normalize=True)
            high_card_freq_maps[col] = freq
            X_train[col + '_freq'] = X_train[col].map(freq).fillna(0)
            X_test[col + '_freq'] = X_test[col].map(freq).fillna(0)
            X_train = X_train.drop(col, axis=1)
            X_test = X_test.drop(col, axis=1)
        else:
            st.warning(f"Kolom high-cardinality '{col}' tidak ditemukan di DataFrame. Mungkin sudah dihapus atau tidak ada.")


    if 'Marital_status' in X_train.columns:
        X_train = pd.get_dummies(X_train, columns=['Marital_status'], prefix='Marital_status', drop_first=False) # drop_first=False agar tidak kehilangan 1 kolom
        X_test = pd.get_dummies(X_test, columns=['Marital_status'], prefix='Marital_status', drop_first=False)
    else:
        st.warning("Kolom 'Marital_status' tidak ditemukan. One-hot encoding dilewati.")


    missing_cols_in_test = set(X_train.columns) - set(X_test.columns)
    for col in missing_cols_in_test:
        X_test[col] = 0
    extra_cols_in_test = set(X_test.columns) - set(X_train.columns)
    X_test = X_test.drop(columns=list(extra_cols_in_test), errors='ignore')
    X_test = X_test[X_train.columns]

    numerical_cols = ['Previous_qualification_grade', 'Admission_grade', 'Age_at_enrollment',
                      'Curricular_units_1st_sem_credited', 'Curricular_units_1st_sem_enrolled',
                      'Curricular_units_1st_sem_evaluations', 'Curricular_units_1st_sem_approved',
                      'Curricular_units_1st_sem_grade', 'Curricular_units_1st_sem_without_evaluations',
                      'Unemployment_rate', 'Inflation_rate', 'GDP']


    numerical_cols = [col for col in numerical_cols if col in X_train.columns]

    scaler = StandardScaler()
    X_train[numerical_cols] = scaler.fit_transform(X_train[numerical_cols])
    X_test[numerical_cols] = scaler.transform(X_test[numerical_cols])

    smote = SMOTE(random_state=42)
    X_train_res, y_train_res = smote.fit_resample(X_train, y_train)


    xgb_model = XGBClassifier(scale_pos_weight=(len(y_train_res) - sum(y_train_res)) / sum(y_train_res),
                              random_state=42, eval_metric='logloss')
    xgb_model.fit(X_train_res, y_train_res)


    joblib.dump(xgb_model, model_filename)
    joblib.dump(scaler, scaler_filename)
    joblib.dump(high_card_freq_maps, high_card_freq_filename)
    joblib.dump(X_train.columns.tolist(), model_features_filename)

    st.success("Model, scaler, frequency maps, dan daftar fitur berhasil disimpan!")
    return True


@st.cache_resource
def load_prediction_assets(model_filename='xgboost_model.pkl', scaler_filename='scaler.pkl',
                           high_card_freq_filename='high_card_freq.pkl', model_features_filename='model_features.pkl'):
    """Memuat model, scaler, frequency maps, dan daftar fitur yang sudah disimpan."""
    try:
        model = joblib.load(model_filename)
        scaler = joblib.load(scaler_filename)
        high_card_freq_maps = joblib.load(high_card_freq_filename)
        model_features = joblib.load(model_features_filename)
        return model, scaler, high_card_freq_maps, model_features
    except FileNotFoundError:
        st.error("File model atau aset preprocessing tidak ditemukan. Silakan jalankan pelatihan model terlebih dahulu.")
        return None, None, None, None


def preprocess_input(input_df, scaler, high_card_freq_maps, model_features):
    """
    Melakukan preprocessing pada input dari pengguna agar sesuai dengan format model.
    """
    processed_df = input_df.copy()

    high_cardinality = ['Application_mode', 'Course', 'Previous_qualification', 'Nacionality',
                        'Mothers_qualification', 'Fathers_qualification', 'Mothers_occupation', 'Fathers_occupation']

    for col in high_cardinality:
        if col in processed_df.columns:

            processed_df[col + '_freq'] = processed_df[col].map(high_card_freq_maps.get(col, {})).fillna(0)
            processed_df = processed_df.drop(col, axis=1)


    if 'Marital_status' in processed_df.columns:

        processed_df = pd.get_dummies(processed_df, columns=['Marital_status'], prefix='Marital_status', drop_first=False) # drop_first=False konsisten dengan pelatihan


    final_df = pd.DataFrame(0, index=[0], columns=model_features)


    for col in final_df.columns:
        if col in processed_df.columns:
            final_df[col] = processed_df[col].values

    numerical_cols = ['Previous_qualification_grade', 'Admission_grade', 'Age_at_enrollment',
                      'Curricular_units_1st_sem_credited', 'Curricular_units_1st_sem_enrolled',
                      'Curricular_units_1st_sem_evaluations', 'Curricular_units_1st_sem_approved',
                      'Curricular_units_1st_sem_grade', 'Curricular_units_1st_sem_without_evaluations',
                      'Unemployment_rate', 'Inflation_rate', 'GDP']


    numerical_cols_to_scale = [col for col in numerical_cols if col in final_df.columns]

    if numerical_cols_to_scale:
        final_df[numerical_cols_to_scale] = scaler.transform(final_df[numerical_cols_to_scale])

    return final_df


st.set_page_config(
    page_title="Prediksi Risiko Dropout Mahasiswa",
    page_icon="🎓",
    layout="wide",
    initial_sidebar_state="expanded"
)


st.title("🎓 Prediksi Risiko Dropout Mahasiswa")
st.markdown("""
Aplikasi ini membantu memprediksi risiko *dropout* mahasiswa berdasarkan berbagai faktor demografi, akademik, dan ekonomi.
Tujuannya adalah untuk mengidentifikasi mahasiswa berisiko tinggi sejak dini dan memberikan dukungan yang tepat.
""")


if not os.path.exists('xgboost_model.pkl'):
    st.warning("Model belum terlatih. Melatih model sekarang. Ini hanya akan dilakukan sekali.")
    train_success = train_and_save_model()
    if not train_success:
        st.stop()

model, scaler, high_card_freq_maps, model_features = load_prediction_assets()

if model is None:
    st.error("Gagal memuat model. Aplikasi tidak dapat berfungsi.")
    st.stop()


st.sidebar.header("Input Data Mahasiswa")
st.sidebar.markdown("Isi detail berikut untuk memprediksi risiko *dropout*.")


marital_status_map = {
    1: "Single", 2: "Married", 3: "Widower", 4: "Divorced", 5: "Facto Union", 6: "Legally Separated"
}
application_mode_map = {
    1: "1st phase - general contingent", 2: "Order re-enrolment", 3: "Change of course",
    5: "1st phase - special contingent (Azores Island)", 7: "Change of institution",
    10: "1st phase - special contingent (Madeira Island)", 15: "2nd phase - general contingent",
    17: "3rd phase - general contingent", 26: "Institutional transfer", 27: "Student with international higher education",
    39: "1st phase - special contingent (scholarship holder from other institution)", 42: "2nd phase - special contingent (scholarship holder from other institution)"
}
course_map = {
    33: "Biofuel Production Technologies", 171: "Animation and Multimedia Design",
    8014: "Social Service (daytime)", 9003: "Agronomy", 9070: "Communication Design",
    9085: "Veterinary Nursing", 9119: "Informatics Engineering", 9130: "Equinculture",
    9147: "Management", 9238: "Social Service (evening)", 9254: "Tourism",
    9500: "Nursing", 9556: "Oral Hygiene", 9670: "Veterinary Medicine",
    9773: "Environmental Health", 9853: "Nutrition", 9991: "European Global Studies",
    9992: "Sport and Physical Education", 9993: "Public Administration"
}
qualification_map = {
    1: "Secondary Education", 2: "Higher Education - bachelor's degree",
    3: "Higher Education - degree", 4: "Higher Education - master's",
    5: "Higher Education - doctorate", 6: "Lived outside Portugal", 9: "Technological specialization course",
    10: "Higher Education - Doutoramento", 11: "Higher Education - Licenciatura",
    12: "Higher Education - Mestrado", 14: "Other", 18: "11th year of schooling",
    19: "12th year of schooling", 20: "9th year of schooling", 21: "Higher Education - bacharelato",
    22: "Technological education, specialized training, and/or professional training courses",
    25: "General secondary course", 29: "Basic Education 3rd Cycle (9th/10th/11th Year) or equiv.",
    30: "Basic Education 2nd Cycle (6th Year) or equiv.", 31: "Basic Education 1st Cycle (4th Year) or equiv.",
    32: "No education - (0 to 4 years)", 33: "Higher Education - other",
    34: "Basic Education 3rd Cycle (9th Year) or equiv.", 35: "Basic Education 2nd Cycle (6th Year) or equiv.",
    36: "Basic Education 1st Cycle (4th Year) or equiv.", 37: "Other (non-specified)",
    38: "Secondary Education (Technical or Professional Course)", 39: "Higher Education - Master's (non-specified)"
}
occupation_map = {
    0: "Student", 1: "Representatives of the Legislative Power",
    2: "Specialists of the Intellectual and Scientific Activities", 3: "Intermediate Level Technicians",
    4: "Administrative Staff", 5: "Personal Services, Security and Surveillance, and Sellers",
    6: "Farmers and Skilled Workers in Agriculture, Fisheries, and Forestry",
    7: "Skilled Workers in Industry, Construction, and Craftsmen", 8: "Installation and Machine Operators and Assembly Workers",
    9: "Unskilled Workers", 10: "Armed Forces Professionals", 11: "Other",
    12: "Unemployed", 13: "Administrative / Office Assistant", 14: "Sales Assistant",
    15: "Teacher", 16: "Doctor", 17: "Engineer", 18: "Accountant", 19: "Manager",
    20: "Architect", 21: "Programmer", 22: "Nurse", 23: "Lawyer", 24: "Journalist",
    25: "Police Officer", 26: "Firefighter", 27: "Artist", 28: "Athlete", 29: "Chef",
    30: "Mechanic", 31: "Electrician", 32: "Plumber", 33: "Construction Worker",
    34: "Cleaner", 35: "Driver", 36: "Security Guard", 37: "Retired", 38: "Homemaker",
    39: "Self-employed"
}



marital_status = st.sidebar.selectbox("Status Pernikahan", options=list(marital_status_map.keys()), format_func=lambda x: marital_status_map[x])
application_mode = st.sidebar.selectbox("Mode Aplikasi", options=list(application_mode_map.keys()), format_func=lambda x: application_mode_map[x])
course = st.sidebar.selectbox("Pilihan Jurusan", options=list(course_map.keys()), format_func=lambda x: course_map[x])
daytime_evening_attendance = st.sidebar.selectbox("Kehadiran Siang/Malam", options=[1, 0], format_func=lambda x: "Siang" if x == 1 else "Malam")
previous_qualification = st.sidebar.number_input("Kualifikasi Sebelumnya (Kode)", min_value=1, value=1)
nacionality = st.sidebar.number_input("Kewarganegaraan (Kode)", min_value=1, value=1)
mothers_qualification = st.sidebar.selectbox("Kualifikasi Pendidikan Ibu", options=list(qualification_map.keys()), format_func=lambda x: qualification_map[x])
fathers_qualification = st.sidebar.selectbox("Kualifikasi Pendidikan Ayah", options=list(qualification_map.keys()), format_func=lambda x: qualification_map[x])
mothers_occupation = st.sidebar.selectbox("Pekerjaan Ibu", options=list(occupation_map.keys()), format_func=lambda x: occupation_map[x])
fathers_occupation = st.sidebar.selectbox("Pekerjaan Ayah", options=list(occupation_map.keys()), format_func=lambda x: occupation_map[x])


application_order = st.sidebar.number_input("Urutan Aplikasi (misal: 1 jika pertama)", min_value=1, value=1)
previous_qualification_grade = st.sidebar.number_input("Nilai Kualifikasi Sebelumnya", min_value=0.0, value=120.0)
admission_grade = st.sidebar.number_input("Nilai Kelulusan (Admission Grade)", min_value=0.0, value=140.0)
age_at_enrollment = st.sidebar.number_input("Usia Saat Pendaftaran", min_value=17, value=20)
debtor = st.sidebar.selectbox("Status Debitor?", options=[0, 1], format_func=lambda x: "Tidak" if x == 0 else "Ya")
tuition_fees_up_to_date = st.sidebar.selectbox("Pembayaran SPP Tepat Waktu?", options=[0, 1], format_func=lambda x: "Tidak" if x == 0 else "Ya")
gender = st.sidebar.selectbox("Jenis Kelamin", options=[1, 0], format_func=lambda x: "Pria" if x == 1 else "Wanita")
scholarship_holder = st.sidebar.selectbox("Penerima Beasiswa?", options=[0, 1], format_func=lambda x: "Tidak" if x == 0 else "Ya")
international = st.sidebar.selectbox("Mahasiswa Internasional?", options=[0, 1], format_func=lambda x: "Tidak" if x == 0 else "Ya")


curricular_units_1st_sem_credited = st.sidebar.number_input("Jumlah SKS Dikecualikan Sem. 1", min_value=0, value=0)
curricular_units_1st_sem_enrolled = st.sidebar.number_input("Jumlah SKS Diambil Sem. 1", min_value=0, value=6)
curricular_units_1st_sem_evaluations = st.sidebar.number_input("Jumlah Ujian Sem. 1", min_value=0, value=6)
curricular_units_1st_sem_approved = st.sidebar.number_input("Jumlah SKS Disetujui Sem. 1", min_value=0, value=6)
curricular_units_1st_sem_grade = st.sidebar.number_input("Rata-rata Nilai Sem. 1", min_value=0.0, value=12.0)
curricular_units_1st_sem_without_evaluations = st.sidebar.number_input("Jumlah Mata Kuliah Tanpa Nilai Sem. 1", min_value=0, value=0)


unemployment_rate = st.sidebar.number_input("Tingkat Pengangguran (%)", min_value=0.0, value=10.0)
inflation_rate = st.sidebar.number_input("Tingkat Inflasi (%)", min_value=-5.0, value=2.0)
gdp = st.sidebar.number_input("Produk Domestik Bruto (GDP)", min_value=-10.0, value=1.0)


if st.sidebar.button("Prediksi Risiko Dropout"):
    input_data = pd.DataFrame({
        'Marital_status': [marital_status],
        'Application_mode': [application_mode],
        'Application_order': [application_order],
        'Course': [course],
        'Daytime_evening_attendance': [daytime_evening_attendance],
        'Previous_qualification': [previous_qualification],
        'Previous_qualification_grade': [previous_qualification_grade],
        'Nacionality': [nacionality],
        'Mothers_qualification': [mothers_qualification],
        'Fathers_qualification': [fathers_qualification],
        'Mothers_occupation': [mothers_occupation],
        'Fathers_occupation': [fathers_occupation],
        'Admission_grade': [admission_grade],
        'Age_at_enrollment': [age_at_enrollment],
        'Debtor': [debtor],
        'Tuition_fees_up_to_date': [tuition_fees_up_to_date],
        'Gender': [gender],
        'Scholarship_holder': [scholarship_holder],
        'International': [international],
        'Curricular_units_1st_sem_credited': [curricular_units_1st_sem_credited],
        'Curricular_units_1st_sem_enrolled': [curricular_units_1st_sem_enrolled],
        'Curricular_units_1st_sem_evaluations': [curricular_units_1st_sem_evaluations],
        'Curricular_units_1st_sem_approved': [curricular_units_1st_sem_approved],
        'Curricular_units_1st_sem_grade': [curricular_units_1st_sem_grade],
        'Curricular_units_1st_sem_without_evaluations': [curricular_units_1st_sem_without_evaluations],
        'Unemployment_rate': [unemployment_rate],
        'Inflation_rate': [inflation_rate],
        'GDP': [gdp]
    })


    processed_input = preprocess_input(input_data, scaler, high_card_freq_maps, model_features)


    prediction_proba = model.predict_proba(processed_input)[:, 1][0]

    st.subheader("Hasil Prediksi:")
    if prediction_proba > 0.5:
        st.error(f"⚠️ Risiko Dropout Tinggi: **{prediction_proba*100:.2f}%**")
        st.write("Mahasiswa ini berisiko tinggi untuk *dropout*. Pertimbangkan untuk memberikan dukungan akademik atau konseling.")
    else:
        st.success(f"✅ Risiko Dropout Rendah: **{prediction_proba*100:.2f}%**")
        st.write("Mahasiswa ini memiliki risiko *dropout* yang rendah. Terus pantau perkembangannya.")

    st.markdown("---")
    st.subheader("Detail Prediksi (Probabilitas):")
    st.metric(label="Probabilitas Dropout", value=f"{prediction_proba*100:.2f}%")


st.subheader("Analisis Data dari Dataset Asli")

st.markdown("""
Bagian ini menampilkan hasil analisis dari dataset asli untuk menjawab pertanyaan Anda.
""")

@st.cache_data
def run_analysis(df_path='data.csv'):
    df_analysis = None
    try:

        df_analysis = pd.read_csv(df_path, sep=';')
        st.success(f"File '{df_path}' berhasil dimuat untuk analisis.")
    except FileNotFoundError:
        st.warning(f"File '{df_path}' tidak ditemukan di direktori saat ini. Mencoba memuat dari '/content/'.")
        try:

            df_analysis = pd.read_csv('/content/' + df_path, sep=';')
            st.success(f"File '{df_path}' berhasil dimuat dari '/content/' untuk analisis.")
        except FileNotFoundError:
            st.error(f"File '{df_path}' tidak ditemukan di '/content/' maupun direktori saat ini. Analisis tidak dapat dilakukan.")
            return
        except Exception as e:
            st.error(f"Terjadi kesalahan saat memuat file '{df_path}' untuk analisis: {e}. Pastikan delimiter CSV Anda benar.")
            return
    except Exception as e:
        st.error(f"Terjadi kesalahan saat memuat file '{df_path}' dari direktori saat ini untuk analisis: {e}. Pastikan delimiter CSV Anda benar.")
        return

    if df_analysis is None:
        return


    df_analysis.columns = df_analysis.columns.str.strip()
    if 'status' in df_analysis.columns and 'Status' not in df_analysis.columns:
        df_analysis.rename(columns={'status': 'Status'}, inplace=True)
    elif 'STATUS' in df_analysis.columns and 'Status' not in df_analysis.columns:
        df_analysis.rename(columns={'STATUS': 'Status'}, inplace=True)

    if 'Status' not in df_analysis.columns:
        st.error("Kolom 'Status' (atau variasinya) tidak ditemukan dalam dataset untuk analisis. Harap periksa nama kolom di file CSV Anda.")
        st.write("Nama kolom yang ditemukan setelah pembersihan (untuk analisis):", df_analysis.columns.tolist()) # Untuk debugging
        return


    df_analysis['target'] = df_analysis['Status'].apply(lambda x: 1 if x == 'Dropout' else 0)


    st.subheader("1. Pengaruh Status Ekonomi terhadap Risiko Dropout")

    contingency_table_debtor = pd.crosstab(df_analysis['Debtor'], df_analysis['target'])
    chi2_debtor, p_debtor, _, _ = chi2_contingency(contingency_table_debtor)
    st.write(f"- **Status Debitor (Debtor):** P-value: {p_debtor:.4f} {'(Signifikan)' if p_debtor < 0.05 else '(Tidak Signifikan)'}")
    if p_debtor < 0.05:
        st.info("Status debitor memiliki pengaruh signifikan terhadap keputusan *dropout*.")
        st.dataframe(contingency_table_debtor)
    else:
        st.info("Status debitor tidak memiliki pengaruh signifikan terhadap keputusan *dropout*.")

    contingency_table_tuition = pd.crosstab(df_analysis['Tuition_fees_up_to_date'], df_analysis['target'])
    chi2_tuition, p_tuition, _, _ = chi2_contingency(contingency_table_tuition)
    st.write(f"- **Pembayaran SPP Tepat Waktu (Tuition_fees_up_to_date):** P-value: {p_tuition:.4f} {'(Signifikan)' if p_tuition < 0.05 else '(Tidak Signifikan)'}")
    if p_tuition < 0.05:
        st.info("Keterlambatan pembayaran SPP memiliki pengaruh signifikan terhadap keputusan *dropout*.")
        st.dataframe(contingency_table_tuition)
    else:
        st.info("Keterlambatan pembayaran SPP tidak memiliki pengaruh signifikan terhadap keputusan *dropout*.")


    st.subheader("2. Hubungan Performa Akademik Semester Pertama dengan Status Mahasiswa")
    mean_grade_dropout = df_analysis[df_analysis['target']==1]['Curricular_units_1st_sem_grade'].mean()
    mean_grade_non_dropout = df_analysis[df_analysis['target']==0]['Curricular_units_1st_sem_grade'].mean()
    grade_diff_percent = ((mean_grade_non_dropout - mean_grade_dropout)/mean_grade_non_dropout)*100

    mean_approved_dropout = df_analysis[df_analysis['target']==1]['Curricular_units_1st_sem_approved'].mean()
    mean_approved_non_dropout = df_analysis[df_analysis['target']==0]['Curricular_units_1st_sem_approved'].mean()

    st.write(f"- **Rata-rata Nilai Semester Pertama:**")
    st.write(f"     - Mahasiswa Dropout: {mean_grade_dropout:.2f}")
    st.write(f"     - Mahasiswa Tidak Dropout: {mean_grade_non_dropout:.2f}")
    st.info(f"Rata-rata nilai mahasiswa yang *dropout* lebih rendah sekitar **{grade_diff_percent:.1f}%** dibanding yang tidak *dropout*.")

    st.write(f"- **Rata-rata Mata Kuliah Disetujui Semester Pertama:**")
    st.write(f"     - Mahasiswa Dropout: {mean_approved_dropout:.2f}")
    st.write(f"     - Mahasiswa Tidak Dropout: {mean_approved_non_dropout:.2f}")
    st.info(f"Mahasiswa yang *dropout* cenderung memiliki lebih sedikit mata kuliah yang disetujui di semester pertama.")

    fig_grade, ax_grade = plt.subplots(figsize=(10, 5))
    sns.boxplot(x='target', y='Curricular_units_1st_sem_grade', data=df_analysis, ax=ax_grade)
    ax_grade.set_title('Distribusi Nilai Semester Pertama vs Status Dropout')
    ax_grade.set_xlabel('Status Dropout (0 = Tidak, 1 = Ya)')
    ax_grade.set_ylabel('Nilai Semester Pertama')
    st.pyplot(fig_grade)


    st.subheader("3. Pengaruh Latar Belakang Pendidikan Orang Tua terhadap Keberhasilan Akademik")
    corr_mother, p_mother = spearmanr(df_analysis['Mothers_qualification'], df_analysis['Curricular_units_1st_sem_grade'])
    corr_father, p_father = spearmanr(df_analysis['Fathers_qualification'], df_analysis['Curricular_units_1st_sem_grade'])

    st.write(f"- **Korelasi Pendidikan Ibu dengan Nilai Semester Pertama (Spearman):** {corr_mother:.2f} (p-value: {p_mother:.4f})")
    st.write(f"- **Korelasi Pendidikan Ayah dengan Nilai Semester Pertama (Spearman):** {corr_father:.2f} (p-value: {p_father:.4f})")

    if p_mother < 0.05 or p_father < 0.05:
        st.info("Terdapat korelasi yang signifikan antara tingkat pendidikan orang tua dengan performa akademik semester pertama mahasiswa.")
    else:
        st.info("Korelasi antara tingkat pendidikan orang tua dengan performa akademik semester pertama mahasiswa tidak signifikan.")

    fig_qual, axes_qual = plt.subplots(1, 2, figsize=(16, 6))

    sns.countplot(x='Mothers_qualification', hue='target', data=df_analysis, palette='viridis',
                  order=sorted(df_analysis['Mothers_qualification'].unique()), ax=axes_qual[0])
    axes_qual[0].set_title('Distribusi Pendidikan Ibu vs Status Dropout')
    axes_qual[0].set_xlabel('Tingkat Pendidikan Ibu (Kode Kategori)')
    axes_qual[0].set_ylabel('Jumlah Mahasiswa')
    axes_qual[0].legend(title='Dropout', labels=['Tidak', 'Ya'])

    sns.countplot(x='Fathers_qualification', hue='target', data=df_analysis, palette='viridis',
                  order=sorted(df_analysis['Fathers_qualification'].unique()), ax=axes_qual[1])
    axes_qual[1].set_title('Distribusi Pendidikan Ayah vs Status Dropout')
    axes_qual[1].set_xlabel('Tingkat Pendidikan Ayah (Kode Kategori)')
    axes_qual[1].set_ylabel('')

    plt.tight_layout()
    st.pyplot(fig_qual)


    st.subheader("4. Prediksi Mahasiswa Berisiko Dropout Menggunakan Model Machine Learning")

    st.info("Model XGBoost memiliki performa terbaik dalam memprediksi *dropout*.")
    st.write("AUC Score (Approximate dari Notebook Anda): **0.90 - 0.95** (Nilai sebenarnya tergantung pada hasil pelatihan terbaru)")
    st.write("Model ini dapat digunakan untuk mengidentifikasi mahasiswa berisiko tinggi sejak semester pertama.")


    st.subheader("5. Faktor Paling Mempengaruhi Risiko Mahasiswa Dropout")
    st.markdown("""
    Berdasarkan analisis *Feature Importance* dari model Random Forest (yang merupakan indikator kuat untuk XGBoost juga),
    faktor-faktor paling berpengaruh yang memengaruhi risiko *dropout* mahasiswa antara lain:

    - **Nilai Rata-rata Mata Kuliah Semester Pertama (`Curricular_units_1st_sem_grade`)**
    - **Jumlah Mata Kuliah yang Disetujui di Semester Pertama (`Curricular_units_1st_sem_approved`)**
    - **Usia Saat Pendaftaran (`Age_at_enrollment`)**
    - **Status Pembayaran SPP Tepat Waktu (`Tuition_fees_up_to_date`)**
    - **Status Debitor (`Debtor`)**
    """)

    st.markdown("""
    Secara umum, **performa akademik di semester pertama** (nilai dan jumlah mata kuliah yang disetujui) adalah indikator paling kuat.
    """)


run_analysis()

st.markdown("---")
st.write("Dibuat dengan ❤️ oleh Jaya Jaya Institut untuk tujuan edukasi.")